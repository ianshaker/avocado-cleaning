/**
 * Telegram Bot Integration
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –≤ Telegram –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞
 */

class TelegramIntegration {
    constructor() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
        this.BOT_TOKEN = '8344143634:AAFBxzO4voYpzvpPIeVKGIlAC0kd5R6miTM';
        this.CHAT_ID = '-1003104142912';
        this.API_URL = `https://api.telegram.org/bot${this.BOT_TOKEN}/sendMessage`;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞ –≤ Telegram
     * @param {Object} slotData - –î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
     * @param {string} phone - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     * @param {string} city - –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
     * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async sendSlotBooking(slotData, phone, city) {
        try {
            const cityName = city === 'almaty' ? '–ê–ª–º–∞—Ç—ã' : '–ê—Å—Ç–∞–Ω–∞';
            const currentTime = new Date().toLocaleString('ru-RU', {
                timeZone: 'Asia/Almaty',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            }) + ' (GMT+6)';

            const formattedDate = this.formatDate(slotData.date);
            const message = `üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–õ–ò–ù–ò–ù–ì</b>

üìç <b>–ì–æ—Ä–æ–¥:</b> ${cityName}
üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${slotData.time}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${phone}</code>
üí∞ <b>–°–∫–∏–¥–∫–∞:</b> ${slotData.discount}

üïê <b>–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:</b> ${currentTime}
üìù <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –§–æ—Ä–º–∞ "–ë–µ—Ä—É —Å–ª–æ—Ç"`;

            const success = await this.sendMessage(message);
            if (success) {
                console.log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–ª–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram');
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
            }
            return success;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
            return false;
        }
    }



    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã "–°–≤–æ–π –ø–∞–∫–µ—Ç" –≤ Telegram
     * @param {Object} packageData - –î–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–µ—Ç–µ
     * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async sendCustomPackage(packageData) {
        try {
            const currentTime = new Date().toLocaleString('ru-RU', {
                timeZone: 'Asia/Almaty',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            }) + ' (GMT+6)';

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
            const additionalServices = [];
            if (packageData.additionalServices) {
                Object.entries(packageData.additionalServices).forEach(([service, selected]) => {
                    if (selected) {
                        const serviceNames = {
                            'fridge-cleaning': '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫',
                            'oven-cleaning': '–¥—É—Ö–æ–≤–∫–∞',
                            'window-cleaning': '–æ–∫–Ω–∞',
                            'carpet-cleaning': '–∫–æ–≤—Ä—ã',
                            'curtain-washing': '—à—Ç–æ—Ä—ã',
                            'mattress-cleaning': '–º–∞—Ç—Ä–∞—Å',
                            'dishes-cleaning': '–ø–æ—Å—É–¥–∞',
                            'ac-cleaning': '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä'
                        };
                        additionalServices.push(serviceNames[service] || service);
                    }
                });
            }

            const additionalServicesText = additionalServices.length > 0 
                ? additionalServices.join(', ') 
                : '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã';

            const message = `üì¶ <b>–ó–ê–Ø–í–ö–ê –ù–ê –°–í–û–ô –ü–ê–ö–ï–¢</b>

üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${packageData.phone}</code>
üìê <b>–ü–ª–æ—â–∞–¥—å:</b> ${packageData.area} –∫–≤.–º
üè† <b>–ö–æ–º–Ω–∞—Ç—ã:</b> ${packageData.rooms}
üè¢ <b>–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:</b> ${packageData.propertyType}
üßπ <b>–¢–∏–ø —É–±–æ—Ä–∫–∏:</b> ${packageData.cleaningType}
‚ûï <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b> ${additionalServicesText}

üïê <b>–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:</b> ${currentTime}
üìù <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –§–æ—Ä–º–∞ "–°–≤–æ–π –ø–∞–∫–µ—Ç"`;

            const success = await this.sendMessage(message);
            if (success) {
                console.log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–≤–æ–π –ø–∞–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram');
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–≤–æ–π –ø–∞–∫–µ—Ç –≤ Telegram');
            }
            return success;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–≤–æ–π –ø–∞–∫–µ—Ç –≤ Telegram:', error);
            return false;
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async sendMessage(message) {
        if (!this.isConfigured()) {
            console.warn('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return false;
        }

        try {
            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram:');
            console.log('Bot Token:', this.BOT_TOKEN);
            console.log('Chat ID:', this.CHAT_ID);
            console.log('Message:', message);
            console.log('API URL:', this.API_URL);

            const requestBody = {
                chat_id: this.CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            };
            console.log('Request body:', JSON.stringify(requestBody, null, 2));

            const response = await fetch(this.API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody)
            });

            console.log('Response status:', response.status);
            console.log('Response headers:', response.headers);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå Telegram API Error Response:', errorText);
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            
            if (result.ok) {
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', result);
                return true;
            } else {
                console.error('–û—à–∏–±–∫–∞ Telegram API:', result.description || result);
                return false;
            }
        } catch (error) {
            if (error.name === 'TypeError' && error.message.includes('fetch')) {
                console.error('üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
            } else {
                console.error('üì± –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message || error);
            }
            return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    createSlotMessage(data) {
        const timestamp = new Date().toLocaleString('ru-RU');
        const formattedDate = this.formatDate(data.date);
        
        let message = `üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–õ–ò–ù–ò–ù–ì</b>\n\n`;
        message += `üìç <b>–ì–æ—Ä–æ–¥:</b> ${data.city}\n`;
        message += `üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}\n`;
        message += `‚è∞ <b>–í—Ä–µ–º—è:</b> ${data.time}\n`;
        message += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${data.phone}</code>\n`;
        
        if (data.discount > 0) {
            message += `üí∞ <b>–°–∫–∏–¥–∫–∞:</b> ${data.discount}%\n`;
        }
        
        message += `\nüïê <b>–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:</b> ${timestamp}`;
        message += `\nüìù <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –§–æ—Ä–º–∞ "–ë–µ—Ä—É —Å–ª–æ—Ç"`;

        return message;
    }



    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     * @param {string} dateString - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
     * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     */
    formatDate(dateString) {
        if (!dateString) return '–ù–µ –≤—ã–±—Ä–∞–Ω–∞';
        
        const date = new Date(dateString);
        const options = { 
            day: 'numeric', 
            month: 'long', 
            weekday: 'long' 
        };
        
        return date.toLocaleDateString('ru-RU', options);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     * @param {string} timeSlot - –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "13-17")
     * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
     */
    formatTime(timeSlot) {
        if (!timeSlot) return '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
        
        const timeMap = {
            '9-13': '09:00 - 13:00',
            '13-17': '13:00 - 17:00',
            '17-22': '17:00 - 22:00'
        };
        
        return timeMap[timeSlot] || timeSlot;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
     * @returns {boolean} - –ù–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –±–æ—Ç
     */
    isConfigured() {
        return this.BOT_TOKEN !== 'YOUR_BOT_TOKEN_HERE' && 
               this.CHAT_ID !== 'YOUR_CHAT_ID_HERE';
    }

    /**
     * –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    async testConnection() {
        if (!this.isConfigured()) {
            console.warn('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –∏ CHAT_ID');
            return false;
        }

        const testMessage = `üß™ <b>–¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø</b>\n\n–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\nüïê ${new Date().toLocaleString('ru-RU')}`;
        
        return await this.sendMessage(testMessage);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.TelegramBot = new TelegramIntegration();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TelegramIntegration;
}